require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const commands = require("./utils/commands");
const { groupOptions } = require("./utils/options");
const {
  setGroup,
  updateSubjects,
  getLabs,
} = require("./services/group.services");
const advice = require("./services/advice.services");
const {
  configure,
  completeLabs,
  configureHandler,
} = require("./services/configure.services");

const sequelize = require("./models/db");

const User = require("./models/user");
const Subject = require("./models/subject");
const Lab = require("./models/lab");
const Activity = require("./models/activity");
const {
  sendActivies,
  activityProgress,
} = require("./services/progress.services");

User.belongsToMany(Subject, { through: Lab });
User.hasMany(Activity);
Subject.belongsToMany(User, { through: Lab });

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

start();
async function connectToDb() {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
  } catch (e) {
    console.log(e);
  }
}

async function start() {
  await connectToDb();
  bot.setMyCommands(commands);
  bot.on("callback_query", async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;
    const user = await User.findOne({ where: { chatId: `${chatId}` } });
    switch (data) {
      case "Group": {
        return setGroup(chatId, user, bot);
      }
      case "Day": {
        return sendActivies(chatId, bot, data);
      }
      case "Month": {
        return sendActivies(chatId, bot, data);
      }
      case "Term": {
        return sendActivies(chatId, bot, data);
      }
      default: {
        return configureHandler(chatId, user, bot, data);
      }
    }
  });

  bot.on("message", async (msg) => {
    try {
      const text = msg.text;
      const chatId = msg.chat.id;
      switch (text) {
        case "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É": {
          return bot.sendMessage(chatId, "–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æü§™", {
            reply_markup: {
              remove_keyboard: true,
            },
          });
        }
        case "/start": {
          const first_name = msg.chat.first_name;
          await User.findOrCreate({ where: { chatId: `${chatId}` } });
          return bot.sendMessage(
            chatId,
            `–ü—Ä–∏–≤–µ—Ç, ${first_name}, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª–∞–±—ã.\n–í–≤–µ–¥–∏—Ç–µ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º –±–æ—Ç–µ.`
          );
        }
        case "/progress": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (!user.group) {
            return bot.sendMessage(
              chatId,
              `–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É /groupü§®`
            );
          }
          return activityProgress(chatId, user, bot);
        }
        case "/info":
          return bot.sendMessage(
            chatId,
            `BSUIR Lab Tracker Bot.\n–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —É—á—ë—Ç –≤—ã–ø–æ–ª–µ–Ω–Ω—ã—Ö –ª–∞–±.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∞–±—ã, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/group - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n/configure - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–± –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n/labs - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ª–∞–± –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n/advice - —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∞–±\n/progress - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∞–± –∑–∞ –º–µ—Å—è—Ü –∏ –∑–∞ –≤–µ—Å—å —Å–µ–º–µ—Å—Ç—Ä\n/update - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞\n`
          );
        case "/update": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (user.group) {
            const result = await updateSubjects(user);
            if (result)
              return bot.sendMessage(
                chatId,
                "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
              );
            return bot.sendMessage(
              chatId,
              "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µü§Ø"
            );
          }
        }
        case "/advice": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (!user.group) {
            return bot.sendMessage(
              chatId,
              `–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É /groupü§®`
            );
          }

          const response = await advice(user);
          return bot.sendMessage(chatId, response);
        }
        case "/group": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (user.group) {
            return bot.sendMessage(
              chatId,
              `–ù–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ${user.group}, —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?ü§î`,
              groupOptions
            );
          }
          return setGroup(chatId, user, bot);
        }
        case "/configure": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (!user.group) {
            return bot.sendMessage(
              chatId,
              `–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É /groupü§®`
            );
          }
          return configure(chatId, user, bot);
        }
        case "/labs": {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          if (!user.group) {
            return bot.sendMessage(
              chatId,
              `–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É /groupü§®`
            );
          }
          return getLabs(msg.chat.id, user, bot);
        }
        default: {
          const user = await User.findOne({ where: { chatId: `${chatId}` } });
          return completeLabs(chatId, user, bot, msg.text);
        }
      }
    } catch (e) {
      return bot.sendMessage(chatId, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!ü§Ø");
    }
  });
}
